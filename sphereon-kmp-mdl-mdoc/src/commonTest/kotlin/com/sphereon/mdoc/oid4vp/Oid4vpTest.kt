package com.sphereon.mdoc.oid4vp


import com.sphereon.json.oid4vpJsonSerializer
import com.sphereon.kmp.Encoding
import com.sphereon.kmp.decodeFrom
import com.sphereon.kmp.decodeFromHex
import com.sphereon.kmp.encodeTo
import com.sphereon.mdoc.TestVectors.iso18013_7_pd
import com.sphereon.mdoc.TestVectors.iso18013_7_submission
import com.sphereon.mdoc.TestVectors.pid_docrequest_json_result
import com.sphereon.mdoc.TestVectors.pid_pd
import com.sphereon.mdoc.TestVectors.sprindFunkeTestVector
import com.sphereon.mdoc.data.device.DeviceResponseCbor
import com.sphereon.mdoc.data.device.IssuerSignedCbor
import kotlinx.serialization.ExperimentalSerializationApi
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull

class Oid4vpTest {

    @Test
    fun shouldTranslatePresentationDefinitionToDocRequest() {

        val pd = oid4vpJsonSerializer.decodeFromString<Oid4VPPresentationDefinition>(pid_pd)
        assertEquals("PID-sample-req", pd.id)
        assertEquals(1, pd.inputDescriptors.size)
        assertEquals("eu.europa.ec.eudi.pid.1", pd.inputDescriptors[0].id)

        val docRequest = pd.toDocRequest()
        assertNotNull(docRequest)
        assertEquals("eu.europa.ec.eudi.pid.1", docRequest.getDocType())
        assertEquals("eu.europa.ec.eudi.pid.1", docRequest.getNameSpaces()[0])
        assertEquals(1, docRequest.itemsRequest.nameSpaces.value.values.size)
        assertEquals(7, docRequest.itemsRequest.nameSpaces.value.values.first().value.values.size)
        assertEquals("eu.europa.ec.eudi.pid.1", docRequest.itemsRequest.getNameSpaces()[0])
        assertEquals(7, docRequest.itemsRequest.getIdentifiers(docRequest.itemsRequest.getNameSpaces()[0]).size)

        val docRequestJson = docRequest.toJson()
        assertNotNull(docRequestJson)
        assertEquals("eu.europa.ec.eudi.pid.1", docRequestJson.getDocType())
        assertEquals(1, docRequestJson.getNameSpaces().size)
        assertEquals(7, docRequestJson.getIdentifiers(docRequestJson.getNameSpaces()[0]).size)

        assertEquals(pid_docrequest_json_result, docRequestJson.toJsonString())
    }


    @Test
    fun shouldApplyPresentationDefinitionToMdoc() {

        val pd = oid4vpJsonSerializer.decodeFromString<Oid4VPPresentationDefinition>(pid_pd)
        val mdoc = IssuerSignedCbor.Static.cborDecode(sprindFunkeTestVector.decodeFrom(Encoding.HEX)).toDocument()

        val issuerSigned = mdoc.limitDisclosures(pd.toDocRequest())

        assertNotNull(issuerSigned)
        // We only should have 7 disclosed items from 22
        assertEquals(7, issuerSigned.nameSpaces?.value?.values?.first()?.value?.size)
        assertEquals(22, issuerSigned.MSO?.valueDigests?.value?.values?.first()?.value?.size)
    }


    @Test
    fun shouldEncodeDecodePresentationDefinition() {

        val pd = oid4vpJsonSerializer.decodeFromString<Oid4VPPresentationDefinition>(iso18013_7_pd)

        println(pd)
        assertEquals("mDL-sample-req", pd.id)
        assertEquals(1, pd.inputDescriptors.size)
        assertEquals("org.iso.18013.5.1.mDL", pd.inputDescriptors[0].id)
        assertEquals(Oid4VPLimitDisclosure.REQUIRED, pd.inputDescriptors[0].constraints.limitDisclosure)
        assertEquals(11, pd.inputDescriptors[0].constraints.fields.size)


        val serialized = oid4vpJsonSerializer.encodeToString(Oid4VPPresentationDefinition.serializer(), pd)
        println(serialized)

        // We cannot compare strings as the order of a JSON object is undefined (except for arrays). Removing the newlines because of pretty printing
        assertEquals(iso18013_7_pd.length, serialized.replace("\n", "").replace(" ", "").length)
    }

    @Test
    fun shouldCreatePresentationSubmissionFromDefinition() {

        val pd = oid4vpJsonSerializer.decodeFromString<Oid4VPPresentationDefinition>(iso18013_7_pd)
        val submission = Oid4VPPresentationSubmission.Static.fromPresentationDefinition(pd, "mDL-sample-res")
        assertEquals("mDL-sample-res", submission.id)
        assertEquals(pd.id, submission.definitionId)
        assertEquals(1, submission.descriptorMap.size)
        assertEquals("org.iso.18013.5.1.mDL", pd.inputDescriptors[0].id)
    }

    @Test
    fun shouldSerializePresentationSubmissionFromDefinition() {

        val pd = oid4vpJsonSerializer.decodeFromString<Oid4VPPresentationDefinition>(iso18013_7_pd)
        val submission = Oid4VPPresentationSubmission.Static.fromPresentationDefinition(pd, "mDL-sample-res")
        val serializedSubmission = oid4vpJsonSerializer.encodeToString(Oid4VPPresentationSubmission.serializer(), submission)
        assertEquals(iso18013_7_submission, serializedSubmission.replace("\n", "").replace(" ", ""))
    }

    @Test
    fun shouldCreateDeviceResponseFromMdoc() {
        val pd = oid4vpJsonSerializer.decodeFromString<Oid4VPPresentationDefinition>(iso18013_7_pd)
        val issuerSigned = IssuerSignedCbor.Static.cborDecode(sprindFunkeTestVector.decodeFromHex())

        assertNotNull(issuerSigned)
        val doc = issuerSigned.toDocument()
        val deviceResponse = doc.toSingleDocDeviceResponse(pd)
        assertNotNull(deviceResponse)
        assertEquals(
            "a36776657273696f6e63312e3069646f63756d656e747381a267646f63547970657765752e6575726f70612e65632e657564692e7069642e316c6973737565725369676e6564a26a6e616d65537061636573a17765752e6575726f70612e65632e657564692e7069642e31806a697373756572417574688443a10126a1182182590278308202743082021ba003020102020102300a06082a8648ce3d040302308188310b3009060355040613024445310f300d06035504070c064265726c696e311d301b060355040a0c1442756e646573647275636b6572656920476d62483111300f060355040b0c0854204353204944453136303406035504030c2d535052494e442046756e6b6520455544492057616c6c65742050726f746f747970652049737375696e67204341301e170d3234303533313038313331375a170d3235303730353038313331375a306c310b3009060355040613024445311d301b060355040a0c1442756e646573647275636b6572656920476d6248310a3008060355040b0c01493132303006035504030c29535052494e442046756e6b6520455544492057616c6c65742050726f746f74797065204973737565723059301306072a8648ce3d020106082a8648ce3d0301070342000438506ae1830a838c397d389fb32b7006e25fffb13b56144f5e2366e764b7ab511322005d5f20cade45711b181e1cf8af2cfdeeb8cbd2ea20c473ba8cc66bddb8a3819030818d301d0603551d0e0416041488f84290b12b0d73cb5b6fc9d1655e821cb0fa62300c0603551d130101ff04023000300e0603551d0f0101ff040403020780302d0603551d1104263024822264656d6f2e7069642d6973737565722e62756e646573647275636b657265692e6465301f0603551d23041830168014d45618c08938e80e588418c97662bfabbbc590be300a06082a8648ce3d040302034700304402201b7f94f391c43385f5a8228ca2d5537b77c23d06c14a9b531696e4698766f219022029891dacd7f6c573e35526e35bf53fe52e6f0040b95f170e6a7bac381ae805b559027d3082027930820220a003020102021407913d41566d99461c0ed0a3281fc7dd542fef68300a06082a8648ce3d040302308188310b3009060355040613024445310f300d06035504070c064265726c696e311d301b060355040a0c1442756e646573647275636b6572656920476d62483111300f060355040b0c0854204353204944453136303406035504030c2d535052494e442046756e6b6520455544492057616c6c65742050726f746f747970652049737375696e67204341301e170d3234303533313036343830395a170d3334303532393036343830395a308188310b3009060355040613024445310f300d06035504070c064265726c696e311d301b060355040a0c1442756e646573647275636b6572656920476d62483111300f060355040b0c0854204353204944453136303406035504030c2d535052494e442046756e6b6520455544492057616c6c65742050726f746f747970652049737375696e672043413059301306072a8648ce3d020106082a8648ce3d03010703420004606cddc050e773bf8a9f989b02f08e33c91eefb550c6a7cc73064bf0868803e58244e7027e663f8221fddaa32bbb9a7f9323a2bc4d110bf21b74c38dbc3a14c9a3663064301d0603551d0e04160414d45618c08938e80e588418c97662bfabbbc590be301f0603551d23041830168014d45618c08938e80e588418c97662bfabbbc590be30120603551d130101ff040830060101ff020100300e0603551d0f0101ff040403020186300a06082a8648ce3d040302034700304402206126ef0919287b7f6ad6f831d1675d6eb2ae7c0c513daed77ea076d975d18ea102206e4c5aaf558b61d6b6f1cc23f4c566479902bd915cb19fc18f7d7dbb108cf3b3590440d81859043ba667646f63547970657765752e6575726f70612e65632e657564692e7069642e316776657273696f6e63312e306c76616c6964697479496e666fa3667369676e656474323032342d30362d32345430363a35303a34305a6976616c696446726f6d74323032342d30362d32345430363a35303a34305a6a76616c6964556e74696c74323032342d30372d30385430363a35303a34305a6c76616c756544696765737473a17765752e6575726f70612e65632e657564692e7069642e31b6005820c955f170b98a76428651380bc4376a72519d4a33ca445916577dd5ab1751e48a015820786997b911e4d02378b48525dd0bb23301f7f65e3818bea5888e4b01bbf2bac402582012287614c468ab4d6c0ab03c819fabfe952a8bb69d77df5a4a0fe5f62b95ef0f035820fdba6693f942c5a1949ec2b69535714559fde2366e6b823ef9390032ee7fb51d045820bf311fbfce2d79ac4ebb95308d402274e3b43c8f883924dd96a58ec5c531a798055820dbeed6230b697198152376692a214ea9ff1c57f47c1b6d1a740aa4df12e6691f0658208c16370d6f5629d2bc3cea1d4e39808fcc8844f83b79c96090ec14e935b641bb0758204ce61b28f2a60a26baec25c32a78e332e2eac5d3d7564da320c030a12c34fd2908582023610d85b0a73ab66c56fa8d1351897b5df2818ecc314fc7bfb97b8fad18e4180958204365beb3b621bed3d8e664d35cdd08b87b53a1caab4d9ab3b1ceecc2b4c60a720a58203198965270e0fc5097269e888f9ad2a69e0fd0b7aa1da1297b6f618a25f76f330b5820e1eb6891a87be4ae79faacc9ebf16d1362ad005f60cb78337137a2add6772c7c0c5820e70a7a9e5f53358897b72c7daa73490939740761412e6e9a958b6738c2db77c50d5820bedd56d824746f67da90efac1b60636d62ed7ed8ca25427bea7ad66b608708e70e5820424e05926292726ea80b01edb793a0e44ff54907ee5a914831d8f4c7c6424b4c0f5820463035d8aaa04f0ea7aa068167dc828949959c74c8fb2b253566d34e677384ea1058209cb38e5b8e7bf565612430d5a20172bb279c5d9ccf2e72a428727117e2d27ace11582028e77f9fdc4ab990dd9da93ebd0d73ac8cd258bc492253e024ca4b127d85b8b612582047c757a809bd727558ff10620a50e60f0b21230203f91f137e27fcd2654c2428135820dd210993dd863178a54f8b544a108bb15d39217796b43c122980ec2df535c561145820c6d93a8f4df6f1cca39f036858a09482f835524dfb064b69cdbe1ab65453e5521558200cba3ab8ddd44983b5e294924bd33fa1c50a0b5299333b6b6ae87e8b6b31b4b96d6465766963654b6579496e666fa1696465766963654b6579a401022001215820cac8ec658dbcac025eac1c2669013322110177a38844fd3d100508c84911fa3d22582012f5cbcbae6c4fc432ccb9d6b02eda20cd5e7a6db4dbd6b00dc588ed63b4112f6f646967657374416c676f726974686d675348412d3235365840b54a064e163165234c5592c14bb3eef08f34202ac39c7b1c804756bd47fe00b958e117c41685967c476018c182e1527cb7b97beeedf36c9275e7fbbafa3a77636673746174757300",
            deviceResponse.cborEncode().encodeTo(Encoding.HEX)
        )
    }

    @Test
    fun shouldDecodeResponseIntoIssuerAuth() {
        val deviceResponse = DeviceResponseCbor.Static.cborDecode("a36776657273696f6e63312e3069646f63756d656e747381a267646f63547970657765752e6575726f70612e65632e657564692e7069642e316c6973737565725369676e6564a26a6e616d65537061636573a17765752e6575726f70612e65632e657564692e7069642e31806a697373756572417574688443a10126a1182182590278308202743082021ba003020102020102300a06082a8648ce3d040302308188310b3009060355040613024445310f300d06035504070c064265726c696e311d301b060355040a0c1442756e646573647275636b6572656920476d62483111300f060355040b0c0854204353204944453136303406035504030c2d535052494e442046756e6b6520455544492057616c6c65742050726f746f747970652049737375696e67204341301e170d3234303533313038313331375a170d3235303730353038313331375a306c310b3009060355040613024445311d301b060355040a0c1442756e646573647275636b6572656920476d6248310a3008060355040b0c01493132303006035504030c29535052494e442046756e6b6520455544492057616c6c65742050726f746f74797065204973737565723059301306072a8648ce3d020106082a8648ce3d0301070342000438506ae1830a838c397d389fb32b7006e25fffb13b56144f5e2366e764b7ab511322005d5f20cade45711b181e1cf8af2cfdeeb8cbd2ea20c473ba8cc66bddb8a3819030818d301d0603551d0e0416041488f84290b12b0d73cb5b6fc9d1655e821cb0fa62300c0603551d130101ff04023000300e0603551d0f0101ff040403020780302d0603551d1104263024822264656d6f2e7069642d6973737565722e62756e646573647275636b657265692e6465301f0603551d23041830168014d45618c08938e80e588418c97662bfabbbc590be300a06082a8648ce3d040302034700304402201b7f94f391c43385f5a8228ca2d5537b77c23d06c14a9b531696e4698766f219022029891dacd7f6c573e35526e35bf53fe52e6f0040b95f170e6a7bac381ae805b559027d3082027930820220a003020102021407913d41566d99461c0ed0a3281fc7dd542fef68300a06082a8648ce3d040302308188310b3009060355040613024445310f300d06035504070c064265726c696e311d301b060355040a0c1442756e646573647275636b6572656920476d62483111300f060355040b0c0854204353204944453136303406035504030c2d535052494e442046756e6b6520455544492057616c6c65742050726f746f747970652049737375696e67204341301e170d3234303533313036343830395a170d3334303532393036343830395a308188310b3009060355040613024445310f300d06035504070c064265726c696e311d301b060355040a0c1442756e646573647275636b6572656920476d62483111300f060355040b0c0854204353204944453136303406035504030c2d535052494e442046756e6b6520455544492057616c6c65742050726f746f747970652049737375696e672043413059301306072a8648ce3d020106082a8648ce3d03010703420004606cddc050e773bf8a9f989b02f08e33c91eefb550c6a7cc73064bf0868803e58244e7027e663f8221fddaa32bbb9a7f9323a2bc4d110bf21b74c38dbc3a14c9a3663064301d0603551d0e04160414d45618c08938e80e588418c97662bfabbbc590be301f0603551d23041830168014d45618c08938e80e588418c97662bfabbbc590be30120603551d130101ff040830060101ff020100300e0603551d0f0101ff040403020186300a06082a8648ce3d040302034700304402206126ef0919287b7f6ad6f831d1675d6eb2ae7c0c513daed77ea076d975d18ea102206e4c5aaf558b61d6b6f1cc23f4c566479902bd915cb19fc18f7d7dbb108cf3b3590440d81859043ba667646f63547970657765752e6575726f70612e65632e657564692e7069642e316776657273696f6e63312e306c76616c6964697479496e666fa3667369676e656474323032342d30362d32345430363a35303a34305a6976616c696446726f6d74323032342d30362d32345430363a35303a34305a6a76616c6964556e74696c74323032342d30372d30385430363a35303a34305a6c76616c756544696765737473a17765752e6575726f70612e65632e657564692e7069642e31b6005820c955f170b98a76428651380bc4376a72519d4a33ca445916577dd5ab1751e48a015820786997b911e4d02378b48525dd0bb23301f7f65e3818bea5888e4b01bbf2bac402582012287614c468ab4d6c0ab03c819fabfe952a8bb69d77df5a4a0fe5f62b95ef0f035820fdba6693f942c5a1949ec2b69535714559fde2366e6b823ef9390032ee7fb51d045820bf311fbfce2d79ac4ebb95308d402274e3b43c8f883924dd96a58ec5c531a798055820dbeed6230b697198152376692a214ea9ff1c57f47c1b6d1a740aa4df12e6691f0658208c16370d6f5629d2bc3cea1d4e39808fcc8844f83b79c96090ec14e935b641bb0758204ce61b28f2a60a26baec25c32a78e332e2eac5d3d7564da320c030a12c34fd2908582023610d85b0a73ab66c56fa8d1351897b5df2818ecc314fc7bfb97b8fad18e4180958204365beb3b621bed3d8e664d35cdd08b87b53a1caab4d9ab3b1ceecc2b4c60a720a58203198965270e0fc5097269e888f9ad2a69e0fd0b7aa1da1297b6f618a25f76f330b5820e1eb6891a87be4ae79faacc9ebf16d1362ad005f60cb78337137a2add6772c7c0c5820e70a7a9e5f53358897b72c7daa73490939740761412e6e9a958b6738c2db77c50d5820bedd56d824746f67da90efac1b60636d62ed7ed8ca25427bea7ad66b608708e70e5820424e05926292726ea80b01edb793a0e44ff54907ee5a914831d8f4c7c6424b4c0f5820463035d8aaa04f0ea7aa068167dc828949959c74c8fb2b253566d34e677384ea1058209cb38e5b8e7bf565612430d5a20172bb279c5d9ccf2e72a428727117e2d27ace11582028e77f9fdc4ab990dd9da93ebd0d73ac8cd258bc492253e024ca4b127d85b8b612582047c757a809bd727558ff10620a50e60f0b21230203f91f137e27fcd2654c2428135820dd210993dd863178a54f8b544a108bb15d39217796b43c122980ec2df535c561145820c6d93a8f4df6f1cca39f036858a09482f835524dfb064b69cdbe1ab65453e5521558200cba3ab8ddd44983b5e294924bd33fa1c50a0b5299333b6b6ae87e8b6b31b4b96d6465766963654b6579496e666fa1696465766963654b6579a401022001215820cac8ec658dbcac025eac1c2669013322110177a38844fd3d100508c84911fa3d22582012f5cbcbae6c4fc432ccb9d6b02eda20cd5e7a6db4dbd6b00dc588ed63b4112f6f646967657374416c676f726974686d675348412d3235365840b54a064e163165234c5592c14bb3eef08f34202ac39c7b1c804756bd47fe00b958e117c41685967c476018c182e1527cb7b97beeedf36c9275e7fbbafa3a77636673746174757300".decodeFrom(Encoding.HEX))
        assertNotNull(deviceResponse)
        val doc = deviceResponse.documents?.get(0)
        assertNotNull(doc)
        assertNotNull(doc.MSO)

        val vpToken = doc.cborEncode().encodeTo(Encoding.BASE64URL)
        assertEquals("omdkb2NUeXBld2V1LmV1cm9wYS5lYy5ldWRpLnBpZC4xbGlzc3VlclNpZ25lZKJqbmFtZVNwYWNlc6F3ZXUuZXVyb3BhLmVjLmV1ZGkucGlkLjGAamlzc3VlckF1dGiEQ6EBJqEYIYJZAngwggJ0MIICG6ADAgECAgECMAoGCCqGSM49BAMCMIGIMQswCQYDVQQGEwJERTEPMA0GA1UEBwwGQmVybGluMR0wGwYDVQQKDBRCdW5kZXNkcnVja2VyZWkgR21iSDERMA8GA1UECwwIVCBDUyBJREUxNjA0BgNVBAMMLVNQUklORCBGdW5rZSBFVURJIFdhbGxldCBQcm90b3R5cGUgSXNzdWluZyBDQTAeFw0yNDA1MzEwODEzMTdaFw0yNTA3MDUwODEzMTdaMGwxCzAJBgNVBAYTAkRFMR0wGwYDVQQKDBRCdW5kZXNkcnVja2VyZWkgR21iSDEKMAgGA1UECwwBSTEyMDAGA1UEAwwpU1BSSU5EIEZ1bmtlIEVVREkgV2FsbGV0IFByb3RvdHlwZSBJc3N1ZXIwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQ4UGrhgwqDjDl9OJ-zK3AG4l__sTtWFE9eI2bnZLerURMiAF1fIMreRXEbGB4c-K8s_e64y9LqIMRzuozGa924o4GQMIGNMB0GA1UdDgQWBBSI-EKQsSsNc8tbb8nRZV6CHLD6YjAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB_wQEAwIHgDAtBgNVHREEJjAkgiJkZW1vLnBpZC1pc3N1ZXIuYnVuZGVzZHJ1Y2tlcmVpLmRlMB8GA1UdIwQYMBaAFNRWGMCJOOgOWIQYyXZiv6u7xZC-MAoGCCqGSM49BAMCA0cAMEQCIBt_lPORxDOF9agijKLVU3t3wj0GwUqbUxaW5GmHZvIZAiApiR2s1_bFc-NVJuNb9T_lLm8AQLlfFw5qe6w4GugFtVkCfTCCAnkwggIgoAMCAQICFAeRPUFWbZlGHA7Qoygfx91UL-9oMAoGCCqGSM49BAMCMIGIMQswCQYDVQQGEwJERTEPMA0GA1UEBwwGQmVybGluMR0wGwYDVQQKDBRCdW5kZXNkcnVja2VyZWkgR21iSDERMA8GA1UECwwIVCBDUyBJREUxNjA0BgNVBAMMLVNQUklORCBGdW5rZSBFVURJIFdhbGxldCBQcm90b3R5cGUgSXNzdWluZyBDQTAeFw0yNDA1MzEwNjQ4MDlaFw0zNDA1MjkwNjQ4MDlaMIGIMQswCQYDVQQGEwJERTEPMA0GA1UEBwwGQmVybGluMR0wGwYDVQQKDBRCdW5kZXNkcnVja2VyZWkgR21iSDERMA8GA1UECwwIVCBDUyBJREUxNjA0BgNVBAMMLVNQUklORCBGdW5rZSBFVURJIFdhbGxldCBQcm90b3R5cGUgSXNzdWluZyBDQTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGBs3cBQ53O_ip-YmwLwjjPJHu-1UManzHMGS_CGiAPlgkTnAn5mP4Ih_dqjK7uaf5MjorxNEQvyG3TDjbw6FMmjZjBkMB0GA1UdDgQWBBTUVhjAiTjoDliEGMl2Yr-ru8WQvjAfBgNVHSMEGDAWgBTUVhjAiTjoDliEGMl2Yr-ru8WQvjASBgNVHRMBAf8ECDAGAQH_AgEAMA4GA1UdDwEB_wQEAwIBhjAKBggqhkjOPQQDAgNHADBEAiBhJu8JGSh7f2rW-DHRZ11usq58DFE9rtd-oHbZddGOoQIgbkxar1WLYda28cwj9MVmR5kCvZFcsZ_Bj319uxCM87NZBEDYGFkEO6ZnZG9jVHlwZXdldS5ldXJvcGEuZWMuZXVkaS5waWQuMWd2ZXJzaW9uYzEuMGx2YWxpZGl0eUluZm-jZnNpZ25lZHQyMDI0LTA2LTI0VDA2OjUwOjQwWml2YWxpZEZyb210MjAyNC0wNi0yNFQwNjo1MDo0MFpqdmFsaWRVbnRpbHQyMDI0LTA3LTA4VDA2OjUwOjQwWmx2YWx1ZURpZ2VzdHOhd2V1LmV1cm9wYS5lYy5ldWRpLnBpZC4xtgBYIMlV8XC5inZChlE4C8Q3anJRnUozykRZFld91asXUeSKAVggeGmXuRHk0CN4tIUl3QuyMwH39l44GL6liI5LAbvyusQCWCASKHYUxGirTWwKsDyBn6v-lSqLtp1331pKD-X2K5XvDwNYIP26ZpP5QsWhlJ7CtpU1cUVZ_eI2bmuCPvk5ADLuf7UdBFggvzEfv84teaxOu5UwjUAidOO0PI-IOSTdlqWOxcUxp5gFWCDb7tYjC2lxmBUjdmkqIU6p_xxX9HwbbRp0CqTfEuZpHwZYIIwWNw1vVinSvDzqHU45gI_MiET4O3nJYJDsFOk1tkG7B1ggTOYbKPKmCia67CXDKnjjMuLqxdPXVk2jIMAwoSw0_SkIWCAjYQ2FsKc6tmxW-o0TUYl7XfKBjswxT8e_uXuPrRjkGAlYIENlvrO2Ib7T2OZk01zdCLh7U6HKq02as7HO7MK0xgpyClggMZiWUnDg_FCXJp6Ij5rSpp4P0LeqHaEpe29hiiX3bzMLWCDh62iRqHvkrnn6rMnr8W0TYq0AX2DLeDNxN6Kt1ncsfAxYIOcKep5fUzWIl7csfapzSQk5dAdhQS5umpWLZzjC23fFDVggvt1W2CR0b2fakO-sG2BjbWLtftjKJUJ76nrWa2CHCOcOWCBCTgWSYpJybqgLAe23k6DkT_VJB-5akUgx2PTHxkJLTA9YIEYwNdiqoE8Op6oGgWfcgolJlZx0yPsrJTVm005nc4TqEFggnLOOW4579WVhJDDVogFyuyecXZzPLnKkKHJxF-LSes4RWCAo53-f3Eq5kN2dqT69DXOsjNJYvEkiU-AkyksSfYW4thJYIEfHV6gJvXJ1WP8QYgpQ5g8LISMCA_kfE34n_NJlTCQoE1gg3SEJk92GMXilT4tUShCLsV05IXeWtDwSKYDsLfU1xWEUWCDG2TqPTfbxzKOfA2hYoJSC-DVSTfsGS2nNvhq2VFPlUhVYIAy6Orjd1EmDteKUkkvTP6HFCgtSmTM7a2rofotrMbS5bWRldmljZUtleUluZm-haWRldmljZUtleaQBAiABIVggysjsZY28rAJerBwmaQEzIhEBd6OIRP09EAUIyEkR-j0iWCAS9cvLrmxPxDLMudawLtogzV56bbTb1rANxYjtY7QRL29kaWdlc3RBbGdvcml0aG1nU0hBLTI1NlhAtUoGThYxZSNMVZLBS7Pu8I80ICrDnHscgEdWvUf-ALlY4RfEFoWWfEdgGMGC4VJ8t7l77u3zbJJ15_u6-jp3Yw", vpToken)
    }

}
